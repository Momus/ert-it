#+TITLE: ert-it
#+AUTHOR: Dmitri Brengauz
#+EXPORT_FILE_NAME: README.md

* README
  :PROPERTIES:
 
  :END:

*** Intro
    Please see the documentation in ert-it.el for now

*** About this Project
    Uses Babel Org, everything is in one file: file:ert-it.org, where
    all the changes should go.

* TODO The Plan
*** [0%] Bare minimum to be useful
    - [-] In a .el file:
      - [X] find a corresponding buffer named *-test.el
      - [X] evaluate it. The whole thing
      - [ ] feed it to ert

* ert-it 
  This functon should:
  1. look for any tests in the current buffer. Evaluate those functons.
  2. look recuresivelly for a -test.el file matching current buffer name, 
  #+BEGIN_SRC emacs-lisp :tangle ert-it.el
    ;;; package --- Summary
    ;; Find and run all your tests.

    ;;; Commentary:
    ;; Best used while the tune to Michael Jackson's \"Beat
    ;; It!\" runs through your head.

    ;;; Code:
    (defun ert-file ()
      "Take name of the current buffer, make it into a test file."
      (concat
       (file-name-sans-extension (expand-file-name (buffer-name)))
       "-test.el"))


    (defun ert-it ()
      "Look for a test file recursively in the working directory.
    Then evaluate and feed it into \\[ert].

        \\[TODO] With \\[universal-argument] it will grab all files of the
        type \"*-test.el\" recursively in the working directory."
      (interactive)
      (load (ert-file))
      (ert-run-tests-interactively t))


    (provide 'ert-it)
    ;;; ert-it ends here
  #+END_SRC
* tests

  #+BEGIN_SRC emacs-lisp  :tangle ert-it-test.el
    ;;; ert-it-test.el --- Tests for ert-it

    ;;; Commentary:

    ;;; Code:
    (load-file "ert-it.el")

    (provide 'ert-it-test)
    ;;; ert-it-test ends here
  #+END_SRC

